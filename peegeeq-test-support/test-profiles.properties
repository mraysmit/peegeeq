# Test Profile Performance Measurements - peegeeq-test-support
# Generated on: 2025-10-26
# 
# This file documents the measured execution times for different test profiles
# in the peegeeq-test-support module after implementing test categorization.

# =============================================================================
# PERFORMANCE RESULTS SUMMARY
# =============================================================================

# Before Categorization:
# - All tests: ~1 minute 15 seconds (75+ seconds)
# - Daily development feedback: Too slow for effective development

# After Categorization:
# - Core tests: 10.4 seconds (7.2x faster than before)
# - Integration tests: 24.0 seconds (3.1x faster than before)  
# - Performance tests: 44.7 seconds (1.7x faster than before)
# - Overall improvement: Significant reduction in daily development feedback time

# =============================================================================
# DETAILED MEASUREMENTS
# =============================================================================

# Core Tests Profile (Default)
# - Profile: core-tests
# - Target: Fast unit tests for daily development
# - Dependencies: Mocked only, no external infrastructure
# - Parallel: methods (4 threads)
core-tests.measured-time=10.4s
core-tests.target-time=<30s
core-tests.test-count=5
core-tests.parallel-execution=methods
core-tests.thread-count=4
core-tests.improvement-factor=7.2x

# Integration Tests Profile  
# - Profile: integration-tests
# - Target: Tests with TestContainers and real infrastructure
# - Dependencies: Real PostgreSQL via TestContainers
# - Parallel: classes (2 threads)
integration-tests.measured-time=24.0s
integration-tests.target-time=1-3m
integration-tests.test-count=3
integration-tests.parallel-execution=classes
integration-tests.thread-count=2
integration-tests.improvement-factor=3.1x

# Performance Tests Profile
# - Profile: performance-tests  
# - Target: Hardware profiling and performance benchmarks
# - Dependencies: Real infrastructure, resource monitoring
# - Parallel: none (1 thread for accurate measurements)
performance-tests.measured-time=44.7s
performance-tests.target-time=2-5m
performance-tests.test-count=2
performance-tests.parallel-execution=none
performance-tests.thread-count=1
performance-tests.improvement-factor=1.7x

# Slow Tests Profile
# - Profile: slow-tests
# - Target: Long-running comprehensive tests
# - Dependencies: Complex scenarios, stress testing
# - Parallel: none (1 thread)
slow-tests.measured-time=not-measured
slow-tests.target-time=5-15m
slow-tests.test-count=1
slow-tests.parallel-execution=none
slow-tests.thread-count=1
slow-tests.note=Contains comprehensive performance demo tests

# All Tests Profile
# - Profile: all-tests
# - Target: Complete test suite validation
# - Dependencies: All infrastructure types
# - Parallel: classes (2 threads)
all-tests.estimated-time=~80s
all-tests.target-time=<10m
all-tests.includes=core,integration,performance,slow
all-tests.excludes=flaky

# =============================================================================
# TEST CATEGORIZATION BREAKDOWN
# =============================================================================

# CORE Tests (5 test classes):
core.PostgreSQLTestConstantsTest=constants-validation
core.PerformanceMetricsCollectorTest=metrics-collection-mocked
core.ConsumerModeTestScenarioTest=scenario-configuration
core.PerformanceComparisonTest=comparison-logic
core.PerformanceSnapshotTest=snapshot-creation

# INTEGRATION Tests (3 test classes):
integration.PeeGeeQTestBaseTest=base-test-class-with-postgresql
integration.ParameterizedPerformanceTestBaseTest=parameterized-performance-base
integration.PeeGeeQTestContainerFactoryTest=testcontainer-factory-validation

# PERFORMANCE Tests (2 test classes):
performance.HardwareProfilingIntegrationTest=hardware-profiling-pipeline
performance.ConsumerModePerformanceTestBaseTest=consumer-performance-patterns

# SLOW Tests (1 test class):
slow.ParameterizedPerformanceDemoTest=comprehensive-performance-demo

# =============================================================================
# DEVELOPMENT WORKFLOW IMPACT
# =============================================================================

# Daily Development (mvn test):
# - Before: 75+ seconds (too slow)
# - After: 10.4 seconds (acceptable feedback time)
# - Improvement: 7.2x faster, enables rapid iteration

# Pre-commit Validation (mvn test -Pintegration-tests):
# - Time: 24.0 seconds (reasonable for pre-commit)
# - Coverage: Real infrastructure validation
# - Purpose: Catch integration issues before push

# Performance Benchmarking (mvn test -Pperformance-tests):
# - Time: 44.7 seconds (focused performance testing)
# - Coverage: Hardware profiling and resource monitoring
# - Purpose: Performance regression detection

# Comprehensive Testing (mvn test -Pall-tests):
# - Time: ~80 seconds (complete validation)
# - Coverage: All test categories except flaky
# - Purpose: CI/CD pipeline validation

# =============================================================================
# CONFIGURATION DETAILS
# =============================================================================

# Maven Surefire Plugin Version
surefire.version=3.2.5

# JUnit 5 Configuration
junit.version=5.x
junit.timeout.default.core=30s
junit.timeout.method.core=10s
junit.timeout.default.integration=5m
junit.timeout.method.integration=3m
junit.timeout.default.performance=10m
junit.timeout.method.performance=5m

# TestContainers Configuration
testcontainers.postgres.image=postgres:15.13-alpine3.20
testcontainers.reuse.enable=true

# Hardware Profiling Configuration
hardware.profiling.enabled=true
hardware.profiling.sampling.interval=100ms
hardware.profiling.resource.monitoring=true

# Performance Metrics Configuration
performance.metrics.collection=enabled
performance.metrics.hardware.profiling=enabled
performance.metrics.comparison=enabled
performance.metrics.history.storage=h2-local

# =============================================================================
# NOTES
# =============================================================================

# 1. Test categorization dramatically improves development feedback time
# 2. Core tests provide rapid feedback for daily development (10.4s)
# 3. Integration tests validate real infrastructure in reasonable time (24.0s)
# 4. Performance tests include comprehensive hardware profiling (44.7s)
# 5. All categories can be run independently or combined as needed
# 6. The system maintains comprehensive test coverage while optimizing execution time
