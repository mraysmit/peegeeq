<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>dev.mars</groupId>
        <artifactId>peegeeq</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>peegeeq-examples</artifactId>
    <name>PeeGeeQ Examples</name>
    <description>Self-contained examples demonstrating PeeGeeQ production readiness features</description>

    <!-- Note: We allow both SCRAM 2.1 and SCRAM 3.1 to coexist in the classpath:
         - SCRAM 2.1 (com.ongres.scram:client, com.ongres.scram:common) is used by R2DBC PostgreSQL 1.0.7.RELEASE
         - SCRAM 3.1 (com.ongres.scram:scram-client, com.ongres.scram:scram-common) is used by Vert.x pg-client 5.0.4
         These use different artifact IDs and can coexist without conflicts. -->

    <dependencies>
        <!-- PeeGeeQ Dependencies -->
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-api</artifactId>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-db</artifactId>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-bitemporal</artifactId>
            <exclusions>
                <!-- Exclude old SCRAM 2.1 dependencies -->
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-service-manager</artifactId>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-native</artifactId>
            <exclusions>
                <!-- Exclude old SCRAM 2.1 dependencies -->
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-outbox</artifactId>
            <exclusions>
                <!-- Exclude old SCRAM 2.1 dependencies -->
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-test-support</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Vert.x Dependencies -->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-consul-client</artifactId>
        </dependency>

        <!-- PostgreSQL Driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <!-- Connection Pooling - Required for examples -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>

        <!-- Metrics -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>

        <!-- Jackson JSR310 for Java 8 time support -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <!-- TestContainers for Self-Contained Demo -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>consul</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Spring Boot Dependencies for Integration Examples -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Spring Boot WebFlux for Reactive Examples -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>

        <!-- Spring Data R2DBC for Reactive Database Access -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-r2dbc</artifactId>
        </dependency>

        <!-- R2DBC PostgreSQL Driver -->
        <!-- Note: R2DBC PostgreSQL 1.0.7.RELEASE requires SCRAM 2.1, which uses different artifact IDs
             than SCRAM 3.1 used by Vert.x. The two versions can coexist:
             - SCRAM 2.1 uses: com.ongres.scram:client and com.ongres.scram:common
             - SCRAM 3.1 uses: com.ongres.scram:scram-client and com.ongres.scram:scram-common
             Therefore, we do NOT exclude SCRAM from r2dbc-postgresql -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>r2dbc-postgresql</artifactId>
        </dependency>

        <!-- R2DBC Pool -->
        <dependency>
            <groupId>io.r2dbc</groupId>
            <artifactId>r2dbc-pool</artifactId>
        </dependency>

        <!-- Reactor Test for Reactive Testing -->
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite-api</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <release>21</release>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <!-- Default to the comprehensive example runner -->
                    <mainClass>dev.mars.peegeeq.examples.PeeGeeQExampleRunner</mainClass>
                    <classpathScope>compile</classpathScope>
                </configuration>
                <executions>
                    <!-- Run all examples with the comprehensive runner -->
                    <execution>
                        <id>run-all-examples</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PeeGeeQExampleRunner</mainClass>
                        </configuration>
                    </execution>

                    <!-- List available examples -->
                    <execution>
                        <id>list-examples</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PeeGeeQExampleRunner</mainClass>
                            <arguments>
                                <argument>--list</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- Self-contained demo (recommended first) -->
                    <execution>
                        <id>run-self-contained-demo</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PeeGeeQSelfContainedDemo</mainClass>
                        </configuration>
                    </execution>

                    <!-- Core examples -->
                    <execution>
                        <id>run-traditional-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PeeGeeQExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-bitemporal-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.BiTemporalEventStoreExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-consumer-group-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.ConsumerGroupExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-multi-config-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.MultiConfigurationExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-transactional-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.TransactionalBiTemporalExample</mainClass>
                        </configuration>
                    </execution>

                    <!-- REST API examples -->
                    <execution>
                        <id>run-rest-api-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.RestApiExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-rest-streaming-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.RestApiStreamingExample</mainClass>
                        </configuration>
                    </execution>

                    <!-- Service discovery examples -->
                    <execution>
                        <id>run-service-discovery-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.ServiceDiscoveryExample</mainClass>
                        </configuration>
                    </execution>

                    <!-- Implementation comparison -->
                    <execution>
                        <id>run-native-vs-outbox-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.NativeVsOutboxComparisonExample</mainClass>
                        </configuration>
                    </execution>

                    <!-- Advanced examples -->
                    <execution>
                        <id>run-advanced-config-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.AdvancedConfigurationExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-message-priority-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.MessagePriorityExample</mainClass>
                            <systemProperties>
                                <systemProperty>
                                    <key>testcontainers.ryuk.disabled</key>
                                    <value>true</value>
                                </systemProperty>
                            </systemProperties>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-error-handling-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.EnhancedErrorHandlingExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-security-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.SecurityConfigurationExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-performance-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PerformanceTuningExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-integration-patterns-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.IntegrationPatternsExample</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Spring Boot Maven Plugin for running Spring Boot applications -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <mainClass>dev.mars.peegeeq.examples.springboot.SpringBootOutboxApplication</mainClass>
                    <profiles>
                        <profile>springboot</profile>
                    </profiles>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
