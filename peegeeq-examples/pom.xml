<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>dev.mars</groupId>
        <artifactId>peegeeq</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>peegeeq-examples</artifactId>
    <name>PeeGeeQ Examples</name>
    <description>Self-contained examples demonstrating PeeGeeQ production readiness features</description>

    <!-- Note: This module contains pure Vert.x examples demonstrating PeeGeeQ production readiness features.
         Spring Boot examples have been moved to the peegeeq-spring-examples module. -->

    <dependencies>
        <!-- PeeGeeQ Dependencies -->
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-api</artifactId>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-db</artifactId>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-bitemporal</artifactId>
            <exclusions>
                <!-- Exclude old SCRAM 2.1 dependencies -->
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-service-manager</artifactId>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-native</artifactId>
            <exclusions>
                <!-- Exclude old SCRAM 2.1 dependencies -->
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-outbox</artifactId>
            <exclusions>
                <!-- Exclude old SCRAM 2.1 dependencies -->
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.ongres.scram</groupId>
                    <artifactId>common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>dev.mars</groupId>
            <artifactId>peegeeq-test-support</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Vert.x Dependencies -->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-consul-client</artifactId>
        </dependency>

        <!-- PostgreSQL Driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <!-- Connection Pooling - Required for examples -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>

        <!-- Metrics -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>

        <!-- Jackson JSR310 for Java 8 time support -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- CloudEvents SDK for Financial Fabric Example -->
        <dependency>
            <groupId>io.cloudevents</groupId>
            <artifactId>cloudevents-core</artifactId>
            <version>4.0.1</version>
        </dependency>
        <dependency>
            <groupId>io.cloudevents</groupId>
            <artifactId>cloudevents-json-jackson</artifactId>
            <version>4.0.1</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <!-- TestContainers for Self-Contained Demo -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>consul</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Spring Boot dependencies moved to peegeeq-spring-examples module -->
        <!-- Keep spring-boot-starter-test for TestContainers integration utilities -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>



        <!-- Reactor Test for Reactive Testing -->
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite-api</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <release>21</release>
                    <parameters>true</parameters>
                </configuration>
            </plugin>

            <!-- Maven Surefire Plugin 3.2.5 for JUnit 5 test execution with tag-based categorization -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
                <configuration>
                    <!-- Tag-based test filtering -->
                    <groups>${test.groups}</groups>
                    <excludedGroups>${test.excludedGroups}</excludedGroups>

                    <!-- Parallel execution configuration -->
                    <parallel>${test.parallel}</parallel>
                    <threadCount>${test.threadCount}</threadCount>
                    <perCoreThreadCount>false</perCoreThreadCount>
                    <useUnlimitedThreads>false</useUnlimitedThreads>

                    <!-- Stop the test run after first failure to align with fast-fail preference -->
                    <skipAfterFailureCount>1</skipAfterFailureCount>

                    <!-- JVM Performance Tuning -->
                    <argLine>
                        -Xmx2g -Xms1g
                        -XX:+UseG1GC
                        -XX:+UseStringDeduplication
                        -XX:MaxGCPauseMillis=100
                        -Djava.awt.headless=true
                        -XX:+EnableDynamicAgentLoading
                    </argLine>

                    <!-- JUnit 5 configuration -->
                    <properties>
                        <configurationParameters>
                            junit.jupiter.execution.timeout.default=${test.timeout.default}
                            junit.jupiter.execution.timeout.testmethod.default=${test.timeout.method}
                        </configurationParameters>
                    </properties>

                    <!-- Improved Test Output -->
                    <trimStackTrace>false</trimStackTrace>
                    <printSummary>true</printSummary>
                    <reportFormat>brief</reportFormat>
                    <useFile>true</useFile>

                    <!-- System Properties for TestContainers -->
                    <systemPropertyVariables>
                        <testcontainers.reuse.enable>true</testcontainers.reuse.enable>
                        <testcontainers.ryuk.disabled>false</testcontainers.ryuk.disabled>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <!-- Default to the comprehensive example runner -->
                    <mainClass>dev.mars.peegeeq.examples.PeeGeeQExampleRunner</mainClass>
                    <classpathScope>compile</classpathScope>
                </configuration>
                <executions>
                    <!-- Run all examples with the comprehensive runner -->
                    <execution>
                        <id>run-all-examples</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PeeGeeQExampleRunner</mainClass>
                        </configuration>
                    </execution>

                    <!-- List available examples -->
                    <execution>
                        <id>list-examples</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PeeGeeQExampleRunner</mainClass>
                            <arguments>
                                <argument>--list</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- Self-contained demo (recommended first) -->
                    <execution>
                        <id>run-self-contained-demo</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PeeGeeQSelfContainedDemo</mainClass>
                        </configuration>
                    </execution>

                    <!-- Core examples -->
                    <execution>
                        <id>run-traditional-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PeeGeeQExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-bitemporal-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.BiTemporalEventStoreExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-consumer-group-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.ConsumerGroupExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-multi-config-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.MultiConfigurationExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-transactional-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.TransactionalBiTemporalExample</mainClass>
                        </configuration>
                    </execution>

                    <!-- REST API examples -->
                    <execution>
                        <id>run-rest-api-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.RestApiExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-rest-streaming-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.RestApiStreamingExample</mainClass>
                        </configuration>
                    </execution>

                    <!-- Service discovery examples -->
                    <execution>
                        <id>run-service-discovery-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.ServiceDiscoveryExample</mainClass>
                        </configuration>
                    </execution>

                    <!-- Implementation comparison -->
                    <execution>
                        <id>run-native-vs-outbox-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.NativeVsOutboxComparisonExample</mainClass>
                        </configuration>
                    </execution>

                    <!-- Advanced examples -->
                    <execution>
                        <id>run-advanced-config-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.AdvancedConfigurationExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-message-priority-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.MessagePriorityExample</mainClass>
                            <systemProperties>
                                <systemProperty>
                                    <key>testcontainers.ryuk.disabled</key>
                                    <value>true</value>
                                </systemProperty>
                            </systemProperties>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-error-handling-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.EnhancedErrorHandlingExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-security-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.SecurityConfigurationExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-performance-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.PerformanceTuningExample</mainClass>
                        </configuration>
                    </execution>

                    <execution>
                        <id>run-integration-patterns-example</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>dev.mars.peegeeq.examples.IntegrationPatternsExample</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Spring Boot Maven Plugin moved to peegeeq-spring-examples module -->
        </plugins>
    </build>

    <profiles>
        <!-- Core Tests Profile - Fast unit tests for daily development -->
        <profile>
            <id>core-tests</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <test.groups>core</test.groups>
                <test.excludedGroups>integration,performance,slow,flaky</test.excludedGroups>
                <test.parallel>methods</test.parallel>
                <test.threadCount>4</test.threadCount>
                <test.timeout.default>30s</test.timeout.default>
                <test.timeout.method>10s</test.timeout.method>
            </properties>
        </profile>

        <!-- Integration Tests Profile - Tests with TestContainers and real infrastructure -->
        <profile>
            <id>integration-tests</id>
            <properties>
                <test.groups>integration</test.groups>
                <test.excludedGroups>performance,slow,flaky</test.excludedGroups>
                <test.parallel>none</test.parallel>
                <test.threadCount>1</test.threadCount>
                <test.timeout.default>10m</test.timeout.default>
                <test.timeout.method>5m</test.timeout.method>
            </properties>
        </profile>

        <!-- Performance Tests Profile - Load and throughput tests -->
        <profile>
            <id>performance-tests</id>
            <properties>
                <test.groups>performance</test.groups>
                <test.excludedGroups>slow,flaky</test.excludedGroups>
                <test.parallel>none</test.parallel>
                <test.threadCount>1</test.threadCount>
                <test.timeout.default>15m</test.timeout.default>
                <test.timeout.method>10m</test.timeout.method>
            </properties>
        </profile>

        <!-- Smoke Tests Profile - Ultra-fast basic verification -->
        <profile>
            <id>smoke-tests</id>
            <properties>
                <test.groups>smoke</test.groups>
                <test.excludedGroups>integration,performance,slow,flaky</test.excludedGroups>
                <test.parallel>methods</test.parallel>
                <test.threadCount>8</test.threadCount>
                <test.timeout.default>30s</test.timeout.default>
                <test.timeout.method>10s</test.timeout.method>
            </properties>
        </profile>

        <!-- Slow Tests Profile - Long-running comprehensive tests -->
        <profile>
            <id>slow-tests</id>
            <properties>
                <test.groups>slow</test.groups>
                <test.excludedGroups>flaky</test.excludedGroups>
                <test.parallel>none</test.parallel>
                <test.threadCount>1</test.threadCount>
                <test.timeout.default>30m</test.timeout.default>
                <test.timeout.method>15m</test.timeout.method>
            </properties>
        </profile>

        <!-- All Tests Profile - Run all tests except flaky ones -->
        <profile>
            <id>all-tests</id>
            <properties>
                <test.groups>core,integration,performance,slow</test.groups>
                <test.excludedGroups>flaky</test.excludedGroups>
                <test.parallel>none</test.parallel>
                <test.threadCount>1</test.threadCount>
                <test.timeout.default>30m</test.timeout.default>
                <test.timeout.method>15m</test.timeout.method>
            </properties>
        </profile>
    </profiles>

</project>
