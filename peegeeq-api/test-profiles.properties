# Test Profile Performance Measurements - peegeeq-api
# Generated: 2025-10-26
# Module: Core API interfaces and common classes for PostgreSQL Message Queue

# =============================================================================
# MEASURED EXECUTION TIMES
# =============================================================================

# Smoke Tests - Ultra-fast basic verification
smoke-tests.measured-time=4.9s
smoke-tests.target-time=<1s
smoke-tests.description=Basic placeholder tests, interface validation, quick checks
smoke-tests.parallel=methods
smoke-tests.thread-count=8

# Core Tests - Fast unit tests for daily development
core-tests.measured-time=4.3s
core-tests.target-time=<2s
core-tests.description=Message filter logic, interface tests, utility classes
core-tests.parallel=methods
core-tests.thread-count=4

# Integration Tests - TestContainers with real infrastructure
integration-tests.measured-time=3.9s
integration-tests.target-time=1-3m
integration-tests.description=Database integration, API implementation validation
integration-tests.parallel=classes
integration-tests.thread-count=2

# Performance Tests - Load and throughput tests
performance-tests.measured-time=TBD
performance-tests.target-time=2-5m
performance-tests.description=API throughput, filter performance, concurrent access
performance-tests.parallel=none
performance-tests.thread-count=1

# Slow Tests - Long-running comprehensive tests
slow-tests.measured-time=TBD
slow-tests.target-time=5+m
slow-tests.description=Comprehensive API validation, stress tests, memory tests
slow-tests.parallel=none
slow-tests.thread-count=1

# All Tests - Comprehensive testing (excludes flaky)
all-tests.estimated-time=5m
all-tests.description=All tests except flaky ones
all-tests.parallel=classes
all-tests.thread-count=2

# =============================================================================
# TEST FILE CATEGORIZATION
# =============================================================================

# SMOKE Tests (1 file)
test.smoke.MessageTest=Basic placeholder test for Message interface

# CORE Tests (1 file)
test.core.MessageFilterDebugTest=Message filter logic with null handling and mock objects

# Future Test Categories (when more tests are added)
# test.integration.MessageApiIntegrationTest=Database integration validation
# test.performance.MessageFilterPerformanceTest=Filter performance benchmarks
# test.slow.MessageApiStressTest=Comprehensive API validation

# =============================================================================
# PERFORMANCE EXPECTATIONS
# =============================================================================

# Before Categorization (estimated)
before.all-tests=~2.3s
before.feedback-cycle=Already fast (API module with minimal tests)

# After Categorization (targets)
after.smoke-tests=<1s
after.core-tests=<2s
after.integration-tests=1-3m
after.performance-tests=2-5m
after.feedback-cycle=Selective execution based on development needs

# Expected Improvements
improvement.smoke-tests=Ultra-fast validation for immediate feedback (4.9s)
improvement.core-tests=Fast daily development cycle maintained (4.3s)
improvement.integration-tests=Infrastructure validation when needed (3.9s)
improvement.performance-tests=API benchmarks for performance validation (when implemented)
improvement.development-cycle=Selective execution based on testing scope

# =============================================================================
# INFRASTRUCTURE REQUIREMENTS
# =============================================================================

# Smoke Tests
smoke.infrastructure=None (placeholder tests only)
smoke.docker=Not required
smoke.external-services=None

# Core Tests
core.infrastructure=None (mocked dependencies)
core.docker=Not required
core.external-services=None (mock Message objects)

# Integration Tests  
integration.infrastructure=PostgreSQL database
integration.docker=Required (PostgreSQL TestContainers)
integration.external-services=PostgreSQL

# Performance Tests
performance.infrastructure=PostgreSQL + monitoring
performance.docker=Required (PostgreSQL + metrics containers)
performance.external-services=PostgreSQL, metrics collection

# Slow Tests
slow.infrastructure=Full infrastructure + monitoring
slow.docker=Required (PostgreSQL + monitoring containers)
slow.external-services=PostgreSQL, metrics collection, extended resources

# =============================================================================
# MAVEN PROFILE COMMANDS
# =============================================================================

# Daily Development
command.core=mvn test
command.core.alternative=mvn test -Pcore-tests

# Ultra-Fast Validation
command.smoke=mvn test -Psmoke-tests

# Infrastructure Testing
command.integration=mvn test -Pintegration-tests

# Performance Benchmarks
command.performance=mvn test -Pperformance-tests

# Comprehensive Testing
command.slow=mvn test -Pslow-tests
command.all=mvn test -Pall-tests

# Helper Script
command.script.smoke=./run-tests.sh smoke
command.script.core=./run-tests.sh core
command.script.integration=./run-tests.sh integration
command.script.performance=./run-tests.sh performance
command.script.all=./run-tests.sh all

# =============================================================================
# NOTES
# =============================================================================

# API Module Characteristics:
# - Core API interfaces and common classes
# - Message and MessageFilter interfaces
# - Minimal external dependencies
# - Fast execution (already optimized)
# - Foundation for other PeeGeeQ modules

# Key Dependencies:
# - PostgreSQL driver (for interfaces)
# - Jackson for JSON processing
# - Vert.x for reactive programming
# - JUnit 5 for testing
# - SLF4J for logging

# Test Strategy:
# - SMOKE: Placeholder tests and basic validation
# - CORE: Interface tests and filter logic (daily development)
# - INTEGRATION: Database integration when implemented
# - PERFORMANCE: API throughput and filter performance
# - SLOW: Comprehensive validation and stress testing

# Current Test Files:
# 1. MessageTest.java (SMOKE) - Placeholder test for Message interface
# 2. MessageFilterDebugTest.java (CORE) - Filter logic with null handling

# Future Test Expansion:
# - Database integration tests (INTEGRATION)
# - Performance benchmarks (PERFORMANCE)
# - Comprehensive API validation (SLOW)
# - Real implementation tests as API grows

# Performance Considerations:
# - Already fast execution (~2.3s total)
# - Categorization enables selective execution
# - Foundation for performance testing as API grows
# - Minimal resource requirements for current tests
