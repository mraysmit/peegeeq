# Test Profile Performance Measurements - peegeeq-performance-test-harness
# Generated: 2025-10-26
# Module: Performance Test Harness (comprehensive performance testing suite)

# =============================================================================
# MEASURED EXECUTION TIMES
# =============================================================================

# Smoke Tests - Ultra-fast basic verification
smoke-tests.measured-time=5.5s
smoke-tests.target-time=<10s
smoke-tests.description=Configuration validation, test suite enumeration, basic setup
smoke-tests.parallel=methods
smoke-tests.thread-count=8

# Performance Tests - Standard performance benchmarks
performance-tests.measured-time=8.5s
performance-tests.target-time=3-5m
performance-tests.description=Standard performance test harness execution, benchmark validation
performance-tests.parallel=none
performance-tests.thread-count=1

# Integration Tests - TestContainers with real infrastructure
integration-tests.measured-time=4.4s
integration-tests.target-time=1-3m
integration-tests.description=Database integration, module integration testing
integration-tests.parallel=classes
integration-tests.thread-count=2

# Slow Tests - Long-running comprehensive tests
slow-tests.measured-time=TBD
slow-tests.target-time=15+m
slow-tests.description=Extended stress tests, comprehensive load tests, full benchmark suites
slow-tests.parallel=none
slow-tests.thread-count=1

# All Tests - Comprehensive testing (excludes flaky)
all-tests.estimated-time=20+m
all-tests.description=All tests except flaky ones
all-tests.parallel=classes
all-tests.thread-count=2

# =============================================================================
# TEST FILE CATEGORIZATION
# =============================================================================

# PERFORMANCE Tests (1 file)
test.performance.PerformanceTestHarnessIntegrationTest=Complete performance test harness execution with all modules

# Future Test Categories (when more tests are added)
# test.smoke.PerformanceConfigTest=Configuration loading and validation
# test.integration.DatabaseIntegrationTest=Database integration validation
# test.slow.StressTestSuite=Extended stress testing scenarios

# =============================================================================
# PERFORMANCE EXPECTATIONS
# =============================================================================

# Before Categorization (estimated)
before.all-tests=~5.0s
before.feedback-cycle=Fast (already optimized for performance testing)

# After Categorization (targets)
after.smoke-tests=<10s
after.performance-tests=3-5m
after.slow-tests=15+m
after.feedback-cycle=Selective execution based on testing needs

# Expected Improvements
improvement.smoke-tests=Quick validation for configuration changes (5.5s)
improvement.performance-tests=Standard benchmarks for regular validation (8.5s)
improvement.slow-tests=Comprehensive stress testing for CI/CD (15+m when enabled)
improvement.development-cycle=Selective execution based on testing scope

# =============================================================================
# PERFORMANCE TEST CONFIGURATION
# =============================================================================

# Standard Performance Tests
performance.duration=300s
performance.threads=10
performance.system-property=peegeeq.performance.tests=true

# Load Testing Configuration
load-test.duration=1800s
load-test.threads=50
load-test.system-property=peegeeq.performance.tests=true

# Stress Testing Configuration
stress-test.duration=3600s
stress-test.threads=100
stress-test.system-property=peegeeq.performance.tests=true

# =============================================================================
# INFRASTRUCTURE REQUIREMENTS
# =============================================================================

# Smoke Tests
smoke.infrastructure=None (configuration validation only)
smoke.docker=Not required
smoke.external-services=None

# Performance Tests  
performance.infrastructure=Full PeeGeeQ stack
performance.docker=Required (PostgreSQL, potentially other services)
performance.external-services=PostgreSQL, all PeeGeeQ modules

# Slow Tests
slow.infrastructure=Full PeeGeeQ stack + monitoring
slow.docker=Required (PostgreSQL + monitoring containers)
slow.external-services=PostgreSQL, metrics collection, all PeeGeeQ modules

# =============================================================================
# MAVEN PROFILE COMMANDS
# =============================================================================

# Daily Development
command.smoke=mvn test
command.smoke.alternative=mvn test -Psmoke-tests

# Performance Benchmarks
command.performance=mvn test -Pperformance-tests

# Comprehensive Testing
command.slow=mvn test -Pslow-tests
command.all=mvn test -Pall-tests

# Legacy Compatibility
command.legacy=mvn test -Pperformance
command.load=mvn test -Pload-test
command.stress=mvn test -Pstress-test

# Helper Script
command.script.smoke=./run-tests.sh smoke
command.script.performance=./run-tests.sh performance
command.script.slow=./run-tests.sh slow
command.script.all=./run-tests.sh all

# =============================================================================
# NOTES
# =============================================================================

# Performance Test Harness Module Characteristics:
# - Comprehensive performance testing suite for all PeeGeeQ modules
# - Configurable test duration and thread counts
# - System property controlled execution (peegeeq.performance.tests=true)
# - Supports multiple testing scenarios (standard, load, stress)
# - Generates performance metrics and reports
# - Validates bi-temporal, outbox, native, and database performance

# Key Dependencies:
# - All PeeGeeQ modules (api, db, outbox, native, bitemporal, rest)
# - Vert.x for reactive programming
# - PostgreSQL for database operations
# - TestContainers for integration testing
# - Micrometer for metrics collection
# - Jackson for JSON processing

# Performance Considerations:
# - Resource-intensive tests requiring dedicated hardware
# - Configurable duration and concurrency levels
# - System property controlled execution
# - Comprehensive metrics collection and reporting
# - Multiple test scenarios for different validation needs

# Test Execution Strategy:
# - SMOKE: Quick configuration validation (daily development)
# - PERFORMANCE: Standard benchmarks (regular validation)
# - SLOW: Comprehensive stress testing (CI/CD pipelines)
# - Selective execution based on testing scope and available time
