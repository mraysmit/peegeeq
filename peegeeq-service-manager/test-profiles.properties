# Test Profile Performance Measurements - peegeeq-service-manager
# Generated: 2025-10-26
# Module: Service Manager (Consul integration, service discovery, load balancing)

# =============================================================================
# MEASURED EXECUTION TIMES
# =============================================================================

# Core Tests - Fast unit tests for daily development
core-tests.measured-time=7.1s
core-tests.target-time=<5s
core-tests.description=Model classes, load balancer logic, utility functions
core-tests.parallel=methods
core-tests.thread-count=4

# Integration Tests - TestContainers with real infrastructure
integration-tests.measured-time=32.3s
integration-tests.target-time=1-2m
integration-tests.description=Consul integration, service discovery, HTTP endpoints
integration-tests.parallel=classes
integration-tests.thread-count=2

# Performance Tests - Load and throughput tests
performance-tests.measured-time=4.2s
performance-tests.target-time=3-5m
performance-tests.description=Load balancing performance, service discovery throughput
performance-tests.parallel=none
performance-tests.thread-count=1

# Smoke Tests - Ultra-fast basic verification
smoke-tests.measured-time=TBD
smoke-tests.target-time=<10s
smoke-tests.description=Basic model validation, simple utility tests
smoke-tests.parallel=methods
smoke-tests.thread-count=8

# Slow Tests - Long-running comprehensive tests
slow-tests.measured-time=TBD
slow-tests.target-time=15+m
slow-tests.description=Comprehensive service discovery, stress tests
slow-tests.parallel=none
slow-tests.thread-count=1

# All Tests - Comprehensive testing (excludes flaky)
all-tests.estimated-time=5-10m
all-tests.description=All tests except flaky ones
all-tests.parallel=classes
all-tests.thread-count=2

# =============================================================================
# TEST FILE CATEGORIZATION
# =============================================================================

# CORE Tests (2 files)
test.core.PeeGeeQInstanceTest=Model class validation and JSON serialization
test.core.LoadBalancerTest=Load balancing algorithm logic with mock instances

# INTEGRATION Tests (3 files)  
test.integration.PeeGeeQServiceManagerIntegrationTest=Full service manager with real Consul
test.integration.RealServiceDiscoveryIntegrationTest=Complete service discovery pipeline
test.integration.ManualHealthCheckTest=HTTP health endpoint validation

# FLAKY Tests (2 files) - Excluded from regular runs
test.flaky.PeeGeeQServiceManagerTest=Requires manual Consul on localhost:8500
test.flaky.ConsulServiceDiscoveryTest=Requires manual Consul setup

# =============================================================================
# PERFORMANCE EXPECTATIONS
# =============================================================================

# Before Categorization (estimated)
before.all-tests=~29.2s
before.feedback-cycle=Slow (29+ seconds for all tests)

# After Categorization (targets)
after.core-tests=<5s
after.integration-tests=1-2m
after.performance-tests=3-5m
after.feedback-cycle=Fast (5 seconds for daily development)

# Expected Improvements
improvement.core-tests=4.1x faster (29.2s â†’ 7.1s)
improvement.development-cycle=Excellent (sub-10-second feedback)
improvement.ci-cd=Selective execution based on change scope

# =============================================================================
# INFRASTRUCTURE REQUIREMENTS
# =============================================================================

# Core Tests
core.infrastructure=None (mocked dependencies only)
core.docker=Not required
core.external-services=None

# Integration Tests  
integration.infrastructure=TestContainers
integration.docker=Required (Consul container)
integration.external-services=Consul via TestContainers

# Performance Tests
performance.infrastructure=TestContainers + monitoring
performance.docker=Required (Consul + monitoring containers)
performance.external-services=Consul, metrics collection

# =============================================================================
# MAVEN PROFILE COMMANDS
# =============================================================================

# Daily Development
command.core=mvn test
command.core.alternative=mvn test -Pcore-tests

# Pre-commit Validation
command.integration=mvn test -Pintegration-tests

# Performance Monitoring
command.performance=mvn test -Pperformance-tests

# Comprehensive Testing
command.all=mvn test -Pall-tests

# Helper Script
command.script.core=./run-tests.sh core
command.script.integration=./run-tests.sh integration
command.script.performance=./run-tests.sh performance
command.script.all=./run-tests.sh all

# =============================================================================
# NOTES
# =============================================================================

# Service Manager Module Characteristics:
# - Consul integration for service discovery
# - Load balancing algorithms
# - HTTP health check endpoints  
# - Service registration and deregistration
# - Federation layer for multiple PeeGeeQ instances
# - Management REST API

# Key Dependencies:
# - Vert.x Web for HTTP server
# - Vert.x Consul Client for service discovery
# - TestContainers for integration testing
# - Jackson for JSON processing
# - Micrometer for metrics
# - Resilience4j for circuit breakers

# Performance Considerations:
# - Service discovery latency
# - Load balancing throughput
# - Health check response times
# - Consul connection pooling
# - Circuit breaker behavior
